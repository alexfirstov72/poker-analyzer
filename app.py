import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from datetime import datetime
from poker_analyzer import PokerHandParser, PokerStatsCalculator  # –ò–º–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–æ–∫–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä", 
    page_icon="‚ô†Ô∏è",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("‚ô†Ô∏è –ü–æ–∫–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä—É–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def create_empty_stats():
    positions = ["UTG", "UTG+1", "MP", "HJ", "CO", "BTN", "SB", "BB"]
    return pd.DataFrame({
        "Position": positions,
        "EV bb/100": [0] * len(positions),
        "VPIP": [0.0] * len(positions),
        "PFR": [0.0] * len(positions),
        "Hands": [0] * len(positions)
    })

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä—É–∫ (—Ñ–æ—Ä–º–∞—Ç TXT)", 
    type=["txt"],
    accept_multiple_files=False
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_df = create_empty_stats()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if uploaded_file is not None:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    file_name = f"hand_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(file_name, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
    
    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        with open(file_name, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä—É–∫
        parser = PokerHandParser()
        parser.parse_file(content)
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        calculator = PokerStatsCalculator(parser.hands)
        stats = calculator.calculate_stats()
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        positions = ["UTG", "UTG1", "MP", "HJ", "CO", "BTN", "SB", "BB"]
        data = []
        
        for pos in positions:
            pos_data = stats.get(pos, {})
            data.append({
                "Position": pos.replace("UTG1", "UTG+1"),
                "EV bb/100": pos_data.get("ev_bb_100", 0),
                "VPIP": pos_data.get("vpip", 0),
                "PFR": pos_data.get("pfr", 0),
                "Hands": pos_data.get("hands", 0)
            })
        
        stats_df = pd.DataFrame(data)
        st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        stats_df = create_empty_stats()
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ä—É–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
st.table(stats_df)

# –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
csv = stats_df.to_csv(index=False).encode('utf-8')
st.download_button(
    label="–°–∫–∞—á–∞—Ç—å CSV",
    data=csv,
    file_name="poker_stats.csv",
    mime="text/csv"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
fig, ax = plt.subplots(figsize=(10, 6))
positions = stats_df["Position"]

# –ì—Ä–∞—Ñ–∏–∫ EV
ax.bar(positions, stats_df["EV bb/100"], color='skyblue', label='EV bb/100')

# –ì—Ä–∞—Ñ–∏–∫ VPIP/PFR
ax2 = ax.twinx()
ax2.plot(positions, stats_df["VPIP"], 'o-', color='green', label='VPIP')
ax2.plot(positions, stats_df["PFR"], 'o-', color='red', label='PFR')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
ax.set_xlabel("–ü–æ–∑–∏—Ü–∏—è")
ax.set_ylabel("EV (bb/100)")
ax2.set_ylabel("VPIP/PFR (%)")
ax.set_title("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
fig.legend(loc="upper left", bbox_to_anchor=(0.1, 0.9))
plt.tight_layout()

st.pyplot(fig)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if uploaded_file is not None and os.path.exists(file_name):
    os.remove(file_name)